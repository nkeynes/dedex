/**
 * Copyright (c) 2010-2011 Toccata Systems.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

package com.toccatasystems.dedex;

import java.io.IOException;
import java.util.Iterator;
import org.apache.commons.cli.*;

import com.toccatasystems.dalvik.*;

/**
 * 
 * @author nkeynes
 *
 */
public class Main {

	private final static String DEDEX_VERSION = "0.4";
	private final static String DEDEX_COPYRIGHT = "Copyright (c) 2010-2011 Toccata Systems. All Rights Reserved.";
	private static Options commandLineOptions;
	
	/**
	 * Construct the command line options statically
	 */
	static {
		Options options = new Options();
		
		OptionGroup outputOpts = new OptionGroup();
		Option dir = new Option("d", "dir", true, "Specify where to place generated class files");
		dir.setArgName("DIR");
		outputOpts.addOption(dir);
		outputOpts.addOption(new Option("D", "dump", false, "Dump dex file to console only"));
		Option output = new Option("o","output",true,"Specify an output JAR file to generate");
		output.setArgName("JAR-FILE");
		outputOpts.addOption(output);
		options.addOptionGroup(outputOpts);
		options.addOption("h","help",false, "Print this help message");
		Option classOpt = new Option("c","class",true,"Specify a single class to generate");
		classOpt.setArgName("CLASS");
		options.addOption(classOpt);
		options.addOption("v","verbose", false, "Verbose disassembly (with -D)");
		options.addOption("V","verify", false, "Verify generated bytecode");
		commandLineOptions = options;
	}
	
	private static void printUsage() {
		System.out.println("dedex " + DEDEX_VERSION + ". " + DEDEX_COPYRIGHT);
		System.out.println("Usage: java -jar dedex-" + DEDEX_VERSION + ".jar [options] <input-dex-file>");
		System.out.println("Output options (at most one may be specified):");
		System.out.println("  -D, --dump                Disassemble dex file to console");
		System.out.println("  -d, --dir=DIR             Write class files to the given directory");
		System.out.println("  -o, --output=JAR-FILE     Write class files to the given .jar file");
		System.out.println();
		System.out.println("Other options:");
		System.out.println("  -c, --class=CLASS         Specify a single class to generate");
		System.out.println("  -h, --help                Print this help message");
		System.out.println("  -v, --verbose             Verbose disassembly (with -D)");
		System.out.println("  -V, --verify              Verify generated bytecode");
		System.out.println();
		System.out.println("  If no output options are given, dedex will create a .jar file in the current\n" +
						   "  directory for each input .dex file." );
	}
	
	private static CommandLine parseCommandLine( String [] args ) {
		GnuParser parser = new GnuParser();
		CommandLine cl = null;
		try {
			cl = parser.parse(commandLineOptions, args);
		} catch (org.apache.commons.cli.ParseException e) {
			System.err.println( e.getMessage() );
			printUsage();
			System.exit(1);
		}

		if( cl.hasOption('h') || cl.getArgList().size() == 0 ) {
			printUsage();
			System.exit(0);
		}
		
		return cl;
	}
		
	
	@SuppressWarnings("unchecked")
	public static void main( String [] args ) {
		CommandLine cl = parseCommandLine(args);

		ClassOutputWriter writer = null;

		String jar = cl.getOptionValue('o');
		String outputdir = cl.getOptionValue('d');
		if( jar != null ) {
			try {
				writer = new JarClassWriter(jar);
			} catch( IOException e ) {
				System.err.println( "Error: Unable to create jar '" + jar + "': " + e.getMessage() );
				System.exit(2);
			}
		} else if( outputdir != null ) {
			writer = new FileClassWriter(outputdir);
		} else {
			writer = new MultiJarClassWriter();
		}
		DexToClassTransformer transform = new DexToClassTransformer(writer, cl.hasOption('V'));

		DexParser parser = new DexParser(); 
		for( Iterator<String> it = cl.getArgList().iterator(); it.hasNext(); ) {
			String file = it.next();
			DexFile dex = null;
			try {
				dex = parser.parseFile(file);
			} catch( Exception e ) { 
				System.err.println( "Error: Unable to load " + file + ": " + e.getMessage() );
				e.printStackTrace();
				System.exit(1);
			}
			
			if( cl.hasOption('c') ) {
				dex = new DexFile(dex, cl.getOptionValue('c'));
				if( dex.getNumClasses() == 0 ) {
					System.err.println( "Error: Unable to find class " + cl.getOptionValue('c') + " in "  + file );
					continue;
				}
			}
			
			RestructureExceptions rest = new RestructureExceptions();
			rest.transform(dex);
			
			if( cl.hasOption('D') ) {
				DexDump dump = new DexDump(System.out, cl.hasOption('v'));
				dex.visit(dump);
			} else {
				dex.visit( transform );
			}
		}
		writer.close();
	}
	
}
